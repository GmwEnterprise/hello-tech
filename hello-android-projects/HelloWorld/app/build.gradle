plugins {
    // 插件：表示这是一个应用程序模块
    // 如果是`com.android.library`则表示这是一个库模块
    id 'com.android.application'

    // 插件：kotlin开发安卓必需
    id 'kotlin-android'

    // 插件：好用的kotlin扩展功能
    id 'kotlin-android-extensions'
}

android {
    // 指定项目的编译版本
    compileSdkVersion 30

    // 指定项目构建工具的版本
    buildToolsVersion "30.0.3"

    defaultConfig {
        // 每个应用的唯一标识符，不可重复，默认使用包名
        applicationId "com.example.helloworld"

        // 项目最低兼容的android版本
        minSdkVersion 21

        // 系统将为应用程序启动基于该版本的最新功能特性
        // 比如现在设定为30，即android 11，系统将启动安卓11的最新功能特性
        targetSdkVersion 30

        // 项目版本号
        versionCode 1

        // 项目版本名
        versionName "1.0"

        // 当前项目中启用junit测试
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // 用于指定生成安装文件的相关配置
    // 通常只有两个子闭包：release、debug
    buildTypes {

        // 用于指定生成正式版安装文件的配置
        release {

            // 指定是否对项目的代码进行混淆
            minifyEnabled false

            // 指定混淆时使用的规则文件，这里指定了两个文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        // debug {} 可以忽略不写，用于指定生成测试版安装文件的配置
    }

    // 似乎时编译相关的配置 fixme
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 似乎是kotlin运行时相关的配置 fixme
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

// 可以指定当前项目所有的依赖关系
// 类似maven，很好理解
dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation 'com.google.android.material:material:1.1.0'

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}